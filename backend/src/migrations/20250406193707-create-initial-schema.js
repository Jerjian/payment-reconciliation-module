"use strict";

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    // --- Create Kroll tables in dependency order ---
    await queryInterface.createTable("kroll_patient", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      FamilyID: { type: Sequelize.INTEGER, allowNull: true },
      Code: { type: Sequelize.STRING(40), allowNull: true },
      LastName: { type: Sequelize.STRING(25), allowNull: false },
      FirstName: { type: Sequelize.STRING(25), allowNull: false },
      AlternateLastName: { type: Sequelize.STRING, allowNull: true },
      Address1: { type: Sequelize.STRING(40), allowNull: true },
      Address2: { type: Sequelize.STRING(40), allowNull: true },
      City: { type: Sequelize.STRING(25), allowNull: true },
      Prov: { type: Sequelize.STRING(2), allowNull: false },
      Postal: { type: Sequelize.STRING(10), allowNull: true },
      Country: { type: Sequelize.STRING(20), allowNull: false },
      AddressLink: { type: Sequelize.INTEGER, allowNull: true },
      AddressVerificationFlags: { type: Sequelize.INTEGER, allowNull: true },
      Birthday: { type: Sequelize.DATE, allowNull: true },
      Sex: { type: Sequelize.CHAR(1), allowNull: false }, // CHAR(1)
      Language: { type: Sequelize.CHAR(1), allowNull: false }, // CHAR(1)
      Weight: { type: Sequelize.STRING(10), allowNull: true },
      Height: { type: Sequelize.STRING(10), allowNull: true },
      EMail: { type: Sequelize.STRING(50), allowNull: true },
      Salutation: { type: Sequelize.STRING(6), allowNull: true },
      LanguageSpoken: { type: Sequelize.STRING, allowNull: true },
      IsAnimal: { type: Sequelize.BOOLEAN, allowNull: true },
      AnimalType: { type: Sequelize.STRING, allowNull: true },
      AnimalOwnerPatId: { type: Sequelize.INTEGER, allowNull: true },
      PatType: { type: Sequelize.INTEGER, allowNull: true },
      RxTotalsResetDate: { type: Sequelize.DATE, allowNull: true },
      TotalDollars: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      TotalRx: { type: Sequelize.INTEGER, allowNull: true },
      PriceGroup: { type: Sequelize.INTEGER, allowNull: true },
      ARID: { type: Sequelize.INTEGER, allowNull: true },
      UnitDosePatPrcGrpId: { type: Sequelize.INTEGER, allowNull: true },
      CreatedOn: { type: Sequelize.DATE, allowNull: false }, // Assuming non-nullable from SQLAlchemy
      LastChanged: { type: Sequelize.DATE, allowNull: false }, // Assuming non-nullable from SQLAlchemy
      LastUsed: { type: Sequelize.DATE, allowNull: true },
      Active: { type: Sequelize.BOOLEAN, allowNull: false }, // Assuming non-nullable from SQLAlchemy
      MergedToId: { type: Sequelize.INTEGER, allowNull: true },
      NetworkSynchronizedDate: { type: Sequelize.DATE, allowNull: true },
      Comment: { type: Sequelize.TEXT, allowNull: true },
      LargeSig: { type: Sequelize.BOOLEAN, allowNull: true },
      FirstDrugName: { type: Sequelize.SMALLINT, allowNull: true },
      SecondDrugName: { type: Sequelize.SMALLINT, allowNull: true },
      PrintCompliance: { type: Sequelize.BOOLEAN, allowNull: true },
      NoWalletCard: { type: Sequelize.BOOLEAN, allowNull: true },
      RemQtyLabelType: { type: Sequelize.INTEGER, allowNull: true },
      VialIdentifier: { type: Sequelize.STRING, allowNull: true },
      DefKrollCare: { type: Sequelize.BOOLEAN, allowNull: true },
      KrollCare: { type: Sequelize.CHAR(1), allowNull: true }, // CHAR(1)
      SnapRequested: { type: Sequelize.BOOLEAN, allowNull: true },
      SnapDocumented: { type: Sequelize.BOOLEAN, allowNull: true },
      NoKrollCare: { type: Sequelize.BOOLEAN, allowNull: true },
      DeliveryRoute: { type: Sequelize.CHAR(10), allowNull: true }, // CHAR(10)
      DeliveryRouteType: { type: Sequelize.INTEGER, allowNull: true },
      DeliveryRouteTypeMask: { type: Sequelize.INTEGER, allowNull: true },
      DefaultDeliveryRouteId: { type: Sequelize.INTEGER, allowNull: true },
      DefaultDeliveryRouteServiceId: {
        type: Sequelize.INTEGER,
        allowNull: true,
      },
      NetworkKeyword: { type: Sequelize.STRING(50), allowNull: true },
      PharmanetLog: { type: Sequelize.TEXT, allowNull: true },
      NetworkKeywordDate: { type: Sequelize.DATE, allowNull: true },
      NetworkId: { type: Sequelize.STRING, allowNull: true },
      NetworkIdRoot: { type: Sequelize.STRING, allowNull: true },
      PharmacyLinkFlags: { type: Sequelize.INTEGER, allowNull: true },
      NHID: { type: Sequelize.INTEGER, allowNull: true },
      NHWardID: { type: Sequelize.INTEGER, allowNull: true },
      NHAdmitDate: { type: Sequelize.DATE, allowNull: true },
      NHDischargeDate: { type: Sequelize.DATE, allowNull: true },
      NHDeceasedDate: { type: Sequelize.DATE, allowNull: true },
      NHRoom: { type: Sequelize.STRING, allowNull: true },
      NHBed: { type: Sequelize.STRING, allowNull: true },
      NHLastTMRDate: { type: Sequelize.DATE, allowNull: true },
      NHInactive: { type: Sequelize.BOOLEAN, allowNull: true },
      NHDiet: { type: Sequelize.STRING, allowNull: true },
      NHComment: { type: Sequelize.STRING, allowNull: true },
      DefaultNHCycleId: { type: Sequelize.INTEGER, allowNull: true },
      UnitDoseType: { type: Sequelize.SMALLINT, allowNull: true },
      UnitDoseCycle: { type: Sequelize.SMALLINT, allowNull: true },
      UnitDoseStrategyID: { type: Sequelize.INTEGER, allowNull: true },
      AutoRefillStatus: { type: Sequelize.SMALLINT, allowNull: true },
      AutoRefillNotification: { type: Sequelize.SMALLINT, allowNull: true },
      StoreID: { type: Sequelize.SMALLINT, allowNull: true },
      StoreLocal: { type: Sequelize.BOOLEAN, allowNull: true },
      LastTMRPrinted: { type: Sequelize.DATE, allowNull: true },
      OCMPin: { type: Sequelize.STRING, allowNull: true },
      PickupNotificationEnrolment: { type: Sequelize.INTEGER, allowNull: true },
      DoubleCount: { type: Sequelize.SMALLINT, allowNull: true },
      // Timestamps handled by Sequelize (createdAt, updatedAt)
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("kroll_drug", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      BrandName: { type: Sequelize.STRING(200), allowNull: false },
      GenericName: { type: Sequelize.STRING(200), allowNull: true },
      DIN: { type: Sequelize.STRING(13), allowNull: false },
      Manufacturer: { type: Sequelize.STRING(100), allowNull: true },
      Description: { type: Sequelize.STRING(50), allowNull: true },
      Comment: { type: Sequelize.TEXT, allowNull: true },
      Active: { type: Sequelize.BOOLEAN, allowNull: true },
      KrollMaintained: { type: Sequelize.SMALLINT, allowNull: true },
      Form: { type: Sequelize.STRING(100), allowNull: true },
      Strength: { type: Sequelize.STRING(20), allowNull: true },
      Package: { type: Sequelize.BOOLEAN, allowNull: true },
      Schedule: { type: Sequelize.STRING(10), allowNull: true },
      Reportable: { type: Sequelize.BOOLEAN, allowNull: true },
      Maintenance: { type: Sequelize.BOOLEAN, allowNull: true },
      ClinicalId: { type: Sequelize.INTEGER, allowNull: true },
      DefaultSig: { type: Sequelize.STRING(200), allowNull: true },
      LinkedDrug: { type: Sequelize.STRING(20), allowNull: true },
      LinkMsg: { type: Sequelize.STRING(20), allowNull: true },
      LinkMsgSeverity: { type: Sequelize.INTEGER, allowNull: true },
      ProductType: { type: Sequelize.STRING(20), allowNull: true },
      PriceGroup: { type: Sequelize.INTEGER, allowNull: true },
      ExpiryDays: { type: Sequelize.INTEGER, allowNull: true },
      FollowupDays: { type: Sequelize.SMALLINT, allowNull: true },
      AutoDispLocation: { type: Sequelize.STRING(200), allowNull: true },
      Location: { type: Sequelize.STRING(20), allowNull: true },
      Created: { type: Sequelize.DATE, allowNull: true }, // Keep original field if needed, separate from createdAt
      Changed: { type: Sequelize.DATE, allowNull: true }, // Keep original field if needed, separate from updatedAt
      Purge: { type: Sequelize.DATE, allowNull: true },
      EquivTo: { type: Sequelize.STRING(50), allowNull: true },
      OralWritten: { type: Sequelize.SMALLINT, allowNull: true },
      SubDrgID: { type: Sequelize.INTEGER, allowNull: true },
      KrollID: { type: Sequelize.INTEGER, allowNull: true },
      PrintCompliance: { type: Sequelize.BOOLEAN, allowNull: true },
      IsTrial: { type: Sequelize.BOOLEAN, allowNull: true },
      FirstDrugName: { type: Sequelize.SMALLINT, allowNull: true },
      SecondDrugName: { type: Sequelize.SMALLINT, allowNull: true },
      IsWardStock: { type: Sequelize.BOOLEAN, allowNull: true },
      IsFlavorRx: { type: Sequelize.BOOLEAN, allowNull: true },
      HalfSizeSig: { type: Sequelize.BOOLEAN, allowNull: true },
      CentralMaintId: { type: Sequelize.INTEGER, allowNull: true },
      CentralMaintFieldMask: { type: Sequelize.INTEGER, allowNull: true },
      InterchangeablePriority: { type: Sequelize.INTEGER, allowNull: true },
      BrandGenericType: { type: Sequelize.INTEGER, allowNull: true },
      TADin: { type: Sequelize.STRING(13), allowNull: true },
      DepartmentId: { type: Sequelize.INTEGER, allowNull: true },
      CentralMaintFieldMask2: { type: Sequelize.INTEGER, allowNull: true },
      ScriptChekImageKey: { type: Sequelize.INTEGER, allowNull: true },
      DrgMessageMastId: { type: Sequelize.INTEGER, allowNull: true },
      EligibleForCoupon: { type: Sequelize.BOOLEAN, allowNull: true },
      IsDevice: { type: Sequelize.BOOLEAN, allowNull: true },
      IsImmunization: { type: Sequelize.BOOLEAN, allowNull: true },
      FeeForServiceType: { type: Sequelize.INTEGER, allowNull: true },
      FollowupFeeForServiceType: { type: Sequelize.INTEGER, allowNull: true },
      DinType: { type: Sequelize.INTEGER, allowNull: true },
      DrgFormId: { type: Sequelize.INTEGER, allowNull: true },
      FDBRouteCode: { type: Sequelize.STRING, allowNull: true },
      MergedToId: { type: Sequelize.INTEGER, allowNull: true },
      CentralMaintOverrideFieldMask: {
        type: Sequelize.INTEGER,
        allowNull: true,
      },
      CentralMaintAllowOverrideFieldMask: {
        type: Sequelize.INTEGER,
        allowNull: true,
      },
      CentralMaintOverrideFieldMask2: {
        type: Sequelize.INTEGER,
        allowNull: true,
      },
      CentralMaintAllowOverrideFieldMask2: {
        type: Sequelize.INTEGER,
        allowNull: true,
      },
      HandlingInstructions: { type: Sequelize.STRING, allowNull: true },
      Description2: { type: Sequelize.STRING, allowNull: true },
      ShapeId: { type: Sequelize.INTEGER, allowNull: true },
      ColourId1: { type: Sequelize.INTEGER, allowNull: true },
      ColourId2: { type: Sequelize.INTEGER, allowNull: true },
      Markings1: { type: Sequelize.STRING, allowNull: true },
      Markings2: { type: Sequelize.STRING, allowNull: true },
      RequireLotNumWhenPackaging: { type: Sequelize.BOOLEAN, allowNull: true },
      RequireExpiryDateWhenPackaging: {
        type: Sequelize.BOOLEAN,
        allowNull: true,
      },
      Refrigerated: { type: Sequelize.BOOLEAN, allowNull: true },
      IsMethadone: { type: Sequelize.BOOLEAN, allowNull: true },
      DoubleCount: { type: Sequelize.BOOLEAN, allowNull: true },
      RxSync: { type: Sequelize.BOOLEAN, allowNull: true },
      UserField1: { type: Sequelize.STRING(20), allowNull: true },
      UserField2: { type: Sequelize.STRING(20), allowNull: true },
      UserField3: { type: Sequelize.STRING(20), allowNull: true },
      DrgType: { type: Sequelize.INTEGER, allowNull: true },
      RefillRemindersAllowed: { type: Sequelize.INTEGER, allowNull: true },
      RefillReminderDefault: { type: Sequelize.INTEGER, allowNull: true },
      VaccineCode: { type: Sequelize.STRING(30), allowNull: true },
      VaccineCodeType: { type: Sequelize.INTEGER, allowNull: true },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("kroll_drug_mix", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      Description: { type: Sequelize.STRING(200), allowNull: true },
      QuickCode: { type: Sequelize.STRING(10), allowNull: true },
      CompEnterType: { type: Sequelize.STRING(20), allowNull: true },
      ConvFactor: { type: Sequelize.DECIMAL(10, 2), allowNull: true },
      BatchQty: { type: Sequelize.DECIMAL(10, 2), allowNull: true },
      Schedule: { type: Sequelize.STRING(10), allowNull: true },
      Reportable: { type: Sequelize.BOOLEAN, allowNull: true },
      PriceGroup: { type: Sequelize.INTEGER, allowNull: true },
      CompoundType: { type: Sequelize.INTEGER, allowNull: true },
      ActCompP3: { type: Sequelize.INTEGER, allowNull: true },
      Instructions: { type: Sequelize.BLOB, allowNull: true },
      Created: { type: Sequelize.DATE, allowNull: true }, // Keep original field if needed
      Changed: { type: Sequelize.DATE, allowNull: true }, // Keep original field if needed
      Purge: { type: Sequelize.DATE, allowNull: true },
      ExpiryDays: { type: Sequelize.INTEGER, allowNull: true },
      Form: { type: Sequelize.STRING(100), allowNull: true },
      PrntInstrAtFill: { type: Sequelize.INTEGER, allowNull: true },
      PrntBatchAndFill: { type: Sequelize.BOOLEAN, allowNull: true },
      ChrgQtyThres1: { type: Sequelize.INTEGER, allowNull: true },
      ChrgQtyThres2: { type: Sequelize.INTEGER, allowNull: true },
      ChrgQtyThres3: { type: Sequelize.INTEGER, allowNull: true },
      ChrgQtyThres4: { type: Sequelize.INTEGER, allowNull: true },
      ChrgQtyThres5: { type: Sequelize.INTEGER, allowNull: true },
      ChrgQty1: { type: Sequelize.INTEGER, allowNull: true },
      ChrgQty2: { type: Sequelize.INTEGER, allowNull: true },
      ChrgQty3: { type: Sequelize.INTEGER, allowNull: true },
      ChrgQty4: { type: Sequelize.INTEGER, allowNull: true },
      ChrgQty5: { type: Sequelize.INTEGER, allowNull: true },
      LastUsed: { type: Sequelize.DATE, allowNull: true },
      OralWritten: { type: Sequelize.SMALLINT, allowNull: true },
      IsMethadone: { type: Sequelize.BOOLEAN, allowNull: true },
      IsIV: { type: Sequelize.BOOLEAN, allowNull: true },
      DrgMixTimeId: { type: Sequelize.INTEGER, allowNull: true },
      DefaultSig: { type: Sequelize.STRING(20), allowNull: true },
      Active: { type: Sequelize.BOOLEAN, allowNull: true },
      EligibleForCoupon: { type: Sequelize.BOOLEAN, allowNull: true },
      DrgFormId: { type: Sequelize.INTEGER, allowNull: true },
      FDBRouteCode: { type: Sequelize.STRING(2), allowNull: true },
      MergedToId: { type: Sequelize.INTEGER, allowNull: true },
      HandlingInstructions: { type: Sequelize.STRING(500), allowNull: true },
      RequireLotNumWhenPackaging: { type: Sequelize.BOOLEAN, allowNull: true },
      RequireExpiryDateWhenPackaging: {
        type: Sequelize.BOOLEAN,
        allowNull: true,
      },
      RequireIngredientConfirmationWhenPackaging: {
        type: Sequelize.BOOLEAN,
        allowNull: true,
      },
      Refrigerated: { type: Sequelize.BOOLEAN, allowNull: true },
      RefillRemindersAllowed: { type: Sequelize.INTEGER, allowNull: true },
      RefillReminderDefault: { type: Sequelize.INTEGER, allowNull: true },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("kroll_plan", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      PlanCode: { type: Sequelize.STRING(10), allowNull: true },
      Description: { type: Sequelize.STRING(40), allowNull: true },
      PharmacyID: { type: Sequelize.STRING(11), allowNull: true },
      Address1: { type: Sequelize.STRING(40), allowNull: true },
      Address2: { type: Sequelize.STRING(40), allowNull: true },
      City: { type: Sequelize.STRING(25), allowNull: true },
      Prov: { type: Sequelize.STRING(2), allowNull: true },
      Postal: { type: Sequelize.STRING(10), allowNull: true },
      Country: { type: Sequelize.STRING(50), allowNull: true },
      Contact: { type: Sequelize.STRING(40), allowNull: true },
      Comment: { type: Sequelize.TEXT, allowNull: true },
      Phone: { type: Sequelize.STRING(14), allowNull: true },
      Fax: { type: Sequelize.STRING(14), allowNull: true },
      AdjHostID: { type: Sequelize.INTEGER, allowNull: true },
      BIN: { type: Sequelize.STRING(10), allowNull: true },
      PrimaryRoute: { type: Sequelize.STRING(20), allowNull: true },
      SecondaryRoute: { type: Sequelize.STRING(20), allowNull: true },
      ProvincialPlanCode: { type: Sequelize.INTEGER, allowNull: true },
      CancelDays: { type: Sequelize.STRING(20), allowNull: true },
      TrialRx: { type: Sequelize.BOOLEAN, allowNull: true },
      Triplicate: { type: Sequelize.BOOLEAN, allowNull: true },
      PayPatient: { type: Sequelize.BOOLEAN, allowNull: true },
      AlternatePayee: { type: Sequelize.BOOLEAN, allowNull: false },
      DailyDetail: { type: Sequelize.BOOLEAN, allowNull: true },
      DefaultRel: { type: Sequelize.BOOLEAN, allowNull: true },
      MixType: { type: Sequelize.INTEGER, allowNull: true },
      MixDIN: { type: Sequelize.STRING(13), allowNull: true },
      CheckCoverage: { type: Sequelize.BOOLEAN, allowNull: false },
      UseGlobal: { type: Sequelize.BOOLEAN, allowNull: true },
      FeePerMin: { type: Sequelize.INTEGER, allowNull: true },
      DontChargeMixTimeBelow: { type: Sequelize.INTEGER, allowNull: true },
      UpchargeOnMixFeePercent: { type: Sequelize.INTEGER, allowNull: true },
      CheckMixCoverage: { type: Sequelize.BOOLEAN, allowNull: true },
      IsProvincialPlan: { type: Sequelize.BOOLEAN, allowNull: true },
      IsRealTime: { type: Sequelize.BOOLEAN, allowNull: true },
      FormularyStrategyID: { type: Sequelize.INTEGER, allowNull: true },
      UseAlternateDocNum: { type: Sequelize.BOOLEAN, allowNull: true },
      CentralMaintId: { type: Sequelize.INTEGER, allowNull: true },
      CentralMaintFieldMask: { type: Sequelize.INTEGER, allowNull: true },
      ClinicalAdjHostId: { type: Sequelize.INTEGER, allowNull: true },
      UseAlternatePharmacistId: { type: Sequelize.BOOLEAN, allowNull: true },
      SendBCPharmanetSpecialAuthCodes: {
        type: Sequelize.BOOLEAN,
        allowNull: true,
      },
      CentralMaintFieldMask2: { type: Sequelize.INTEGER, allowNull: true },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("kroll_patient_phone", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      PatID: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "kroll_patient", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      Description: { type: Sequelize.STRING(10), allowNull: false },
      Phone: { type: Sequelize.STRING(14), allowNull: false },
      Extension: { type: Sequelize.STRING(8), allowNull: true },
      LongDistance: { type: Sequelize.BOOLEAN, allowNull: false },
      Type: { type: Sequelize.SMALLINT, allowNull: false, defaultValue: 0 },
      status: { type: Sequelize.ENUM("active", "inactive"), allowNull: true }, // Ensure ENUM matches model
      DateCreated: { type: Sequelize.DATE, allowNull: false }, // Map createdAt to this
      DateChanged: { type: Sequelize.DATE, allowNull: false }, // Map updatedAt to this
      createdAt: {
        field: "DateCreated",
        type: Sequelize.DATE,
        allowNull: false,
      },
      updatedAt: {
        field: "DateChanged",
        type: Sequelize.DATE,
        allowNull: false,
      },
    });

    await queryInterface.createTable("kroll_patient_alg", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      PatID: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "kroll_patient", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      Code: { type: Sequelize.STRING(50), allowNull: false },
      Comment: { type: Sequelize.TEXT, allowNull: true },
      Seq: { type: Sequelize.SMALLINT, allowNull: true },
      Source: { type: Sequelize.INTEGER, allowNull: true },
      DateAdded: { type: Sequelize.DATE, allowNull: true }, // Keep original field if needed
      Severity: { type: Sequelize.STRING(4000), allowNull: true },
      CodeType: { type: Sequelize.INTEGER, allowNull: false },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("kroll_patient_cnd", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      PatID: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "kroll_patient", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      Code: { type: Sequelize.STRING(50), allowNull: true },
      Comment: { type: Sequelize.TEXT, allowNull: true },
      Seq: { type: Sequelize.SMALLINT, allowNull: true },
      Source: { type: Sequelize.INTEGER, allowNull: true },
      DateAdded: { type: Sequelize.DATE, allowNull: true }, // Keep original field if needed
      Severity: { type: Sequelize.STRING(4000), allowNull: true },
      CodeType: { type: Sequelize.INTEGER, allowNull: true },
      CeRxRoot: { type: Sequelize.STRING(200), allowNull: true },
      CeRxExtension: { type: Sequelize.STRING(200), allowNull: true },
      CeRxCode: { type: Sequelize.STRING(50), allowNull: true },
      CeRxCodeSystem: { type: Sequelize.STRING(200), allowNull: true },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("kroll_patient_com", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      PatID: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "kroll_patient", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      Topic: { type: Sequelize.STRING(15), allowNull: true },
      Created: { type: Sequelize.DATE, allowNull: true }, // Keep original field if needed
      Changed: { type: Sequelize.DATE, allowNull: true }, // Keep original field if needed
      Comment: { type: Sequelize.BLOB, allowNull: true },
      ShowOnRx: { type: Sequelize.BOOLEAN, allowNull: true },
      PrintOnHardcopy: { type: Sequelize.BOOLEAN, allowNull: true },
      Conspicuous: { type: Sequelize.BOOLEAN, allowNull: true },
      CeRxRoot: { type: Sequelize.STRING(200), allowNull: true },
      CeRxExtension: { type: Sequelize.STRING(200), allowNull: true },
      CreatedFromNetwork: { type: Sequelize.BOOLEAN, allowNull: true },
      WorkflowAlerts: { type: Sequelize.STRING(100), allowNull: true },
      CommentPlainText: { type: Sequelize.TEXT, allowNull: true },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("kroll_drug_pack", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      DrgID: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "kroll_drug", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      QuickCode: { type: Sequelize.STRING(10), allowNull: true },
      Active: { type: Sequelize.BOOLEAN, allowNull: true },
      UPC: { type: Sequelize.STRING(20), allowNull: true },
      PackSize: { type: Sequelize.DECIMAL(9, 1), allowNull: false },
      PackType: { type: Sequelize.STRING(40), allowNull: true },
      PackUnit: { type: Sequelize.STRING(40), allowNull: true },
      PackDesc: { type: Sequelize.STRING(80), allowNull: true },
      CaseSize: { type: Sequelize.INTEGER, allowNull: true },
      OrderByCase: { type: Sequelize.BOOLEAN, allowNull: true },
      OnHandQty: { type: Sequelize.DECIMAL(22, 3), allowNull: true },
      MinOnHandQty: { type: Sequelize.DECIMAL(22, 1), allowNull: true },
      MaxOnHandQty: { type: Sequelize.DECIMAL(22, 1), allowNull: true },
      AcqCost: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      SellingCost: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      UserCost1: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      UserCost2: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      UserCost3: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      AcqCostChgdDate: { type: Sequelize.DATE, allowNull: true },
      SellingCostChgdDate: { type: Sequelize.DATE, allowNull: true },
      UserCost1ChgdDate: { type: Sequelize.DATE, allowNull: true },
      UserCost2ChgdDate: { type: Sequelize.DATE, allowNull: true },
      UserCost3ChgdDate: { type: Sequelize.DATE, allowNull: true },
      LastAcqCost: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      LastSellingCost: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      LastUserCost1: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      LastUserCost2: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      LastUserCost3: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      Lot: { type: Sequelize.STRING(20), allowNull: true },
      Expiry: { type: Sequelize.DATE, allowNull: true },
      InvResetDate: { type: Sequelize.DATE, allowNull: true },
      Created: { type: Sequelize.DATE, allowNull: true }, // Keep original field if needed
      Changed: { type: Sequelize.DATE, allowNull: true }, // Keep original field if needed
      Purge: { type: Sequelize.DATE, allowNull: true },
      LastUsed: { type: Sequelize.DATE, allowNull: true },
      ExpiryDays: { type: Sequelize.INTEGER, allowNull: true },
      ForceOrder: { type: Sequelize.BOOLEAN, allowNull: true },
      DefOrderQty: { type: Sequelize.DECIMAL(22, 2), allowNull: true },
      DisableAutoOrder: { type: Sequelize.BOOLEAN, allowNull: true },
      DisableInvAdj: { type: Sequelize.BOOLEAN, allowNull: true },
      MinDays: { type: Sequelize.DECIMAL, allowNull: true },
      MaxDays: { type: Sequelize.DECIMAL, allowNull: true },
      MinScripts: { type: Sequelize.INTEGER, allowNull: true },
      AvgRxQty: { type: Sequelize.DECIMAL, allowNull: true },
      AvgDailyUsage: { type: Sequelize.DECIMAL, allowNull: true },
      LastAvgCalcDate: { type: Sequelize.DATE, allowNull: true },
      AcqCostChgdBy: { type: Sequelize.STRING, allowNull: true },
      SellingCostChgdBy: { type: Sequelize.STRING, allowNull: true },
      UserCost1ChgdBy: { type: Sequelize.STRING, allowNull: true },
      UserCost2ChgdBy: { type: Sequelize.STRING, allowNull: true },
      UserCost3ChgdBy: { type: Sequelize.STRING, allowNull: true },
      KrollMaintained: { type: Sequelize.SMALLINT, allowNull: true },
      StoreID: { type: Sequelize.SMALLINT, allowNull: true },
      BaseOrderingOn: { type: Sequelize.SMALLINT, allowNull: true },
      FrontStore: { type: Sequelize.BOOLEAN, allowNull: true },
      OrderQtyMultiple: { type: Sequelize.INTEGER, allowNull: true },
      CentralMaintId: { type: Sequelize.INTEGER, allowNull: true },
      CentralMaintFieldMask: { type: Sequelize.INTEGER, allowNull: true },
      DrgPackTierId: { type: Sequelize.INTEGER, allowNull: true },
      DefVendor: { type: Sequelize.INTEGER, allowNull: true },
      CentralMaintOverrideFieldMask: {
        type: Sequelize.INTEGER,
        allowNull: true,
      },
      CentralMaintAllowOverrideFieldMask: {
        type: Sequelize.INTEGER,
        allowNull: true,
      },
      MaxRxQty: { type: Sequelize.DECIMAL, allowNull: true },
      MinScriptsCalcType: { type: Sequelize.INTEGER, allowNull: true },
      LastCycleCountDate: { type: Sequelize.DATE, allowNull: true },
      AcqCostChgdByUserId: { type: Sequelize.INTEGER, allowNull: true },
      SellingCostChgdByUserId: { type: Sequelize.INTEGER, allowNull: true },
      UserCost1ChgdByUserId: { type: Sequelize.INTEGER, allowNull: true },
      UserCost2ChgdByUserId: { type: Sequelize.INTEGER, allowNull: true },
      UserCost3ChgdByUserId: { type: Sequelize.INTEGER, allowNull: true },
      UserCost4: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      UserCost5: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      UserCost4ChgdDate: { type: Sequelize.DATE, allowNull: true },
      UserCost5ChgdDate: { type: Sequelize.DATE, allowNull: true },
      LastUserCost4: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      LastUserCost5: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      UserCost4ChgdBy: { type: Sequelize.STRING(20), allowNull: true },
      UserCost5ChgdBy: { type: Sequelize.STRING(20), allowNull: true },
      UserCost4ChgdByUserId: { type: Sequelize.INTEGER, allowNull: true },
      UserCost5ChgdByUserId: { type: Sequelize.INTEGER, allowNull: true },
      UseSellingCostGridPrice: { type: Sequelize.INTEGER, allowNull: true },
      UseUserCost1GridPrice: { type: Sequelize.INTEGER, allowNull: true },
      UseUserCost2GridPrice: { type: Sequelize.INTEGER, allowNull: true },
      UseUserCost3GridPrice: { type: Sequelize.INTEGER, allowNull: true },
      UseUserCost4GridPrice: { type: Sequelize.INTEGER, allowNull: true },
      UseUserCost5GridPrice: { type: Sequelize.INTEGER, allowNull: true },
      MarkupPercent: { type: Sequelize.DECIMAL(9, 3), allowNull: true },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("kroll_plan_sub", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      PlanID: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "kroll_plan", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      SubPlanCode: { type: Sequelize.STRING(10), allowNull: true },
      DefSubPlan: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      Description: { type: Sequelize.STRING(40), allowNull: false },
      CarrierIDRO: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      GroupRO: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      ClientRO: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      CPHARO: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      RelRO: { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
      ExpiryRO: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      CarrierIDReq: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      GroupReq: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      ClientReq: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      CPHAReq: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      RelReq: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      ExpiryReq: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      DeductReq: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      BirthReq: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      DefaultCarrierID: { type: Sequelize.STRING(2), allowNull: true },
      DefaultGroupID: { type: Sequelize.STRING(10), allowNull: true },
      DefaultClientID: { type: Sequelize.STRING(15), allowNull: true },
      DefaultCPHAPatCode: { type: Sequelize.STRING(3), allowNull: true },
      MaskCarrierID: { type: Sequelize.STRING(2), allowNull: true },
      MaskGroupID: { type: Sequelize.STRING(10), allowNull: true },
      MaskClientID: { type: Sequelize.STRING(15), allowNull: true },
      MaskCPHAPatCode: { type: Sequelize.STRING(3), allowNull: true },
      UsePlanPricing: { type: Sequelize.BOOLEAN, allowNull: true },
      UsePlanPatInfo: { type: Sequelize.BOOLEAN, allowNull: true },
      BillingReport: { type: Sequelize.BOOLEAN, allowNull: true },
      Comment: { type: Sequelize.TEXT, allowNull: true },
      CorporateID: { type: Sequelize.STRING(10), allowNull: true },
      DefaultDeductType: { type: Sequelize.INTEGER, allowNull: true },
      DefaultDeductValue: { type: Sequelize.CHAR(15), allowNull: true }, // CHAR
      ExcludeFromNetworkTotals: { type: Sequelize.BOOLEAN, allowNull: true },
      HelpStr: { type: Sequelize.STRING(100), allowNull: true },
      CardImage: { type: Sequelize.BLOB, allowNull: true },
      DeferPricingToSecondPlan: { type: Sequelize.BOOLEAN, allowNull: true },
      AllowFillIfPlanExpired: { type: Sequelize.BOOLEAN, allowNull: true },
      IgnorePatPrcGrp: { type: Sequelize.BOOLEAN, allowNull: true },
      PromptForDeductWhenBillingManually: {
        type: Sequelize.BOOLEAN,
        allowNull: true,
      },
      Active: { type: Sequelize.BOOLEAN, allowNull: true },
      CentralMaintId: { type: Sequelize.INTEGER, allowNull: true },
      CentralMaintFieldMask: { type: Sequelize.INTEGER, allowNull: true },
      DrgPackTierId: { type: Sequelize.INTEGER, allowNull: true },
      DUEOnly: { type: Sequelize.BOOLEAN, allowNull: true },
      AllowManualBilling: { type: Sequelize.BOOLEAN, allowNull: true },
      TreatAsDUEIfPlanPaysZero: { type: Sequelize.BOOLEAN, allowNull: true },
      CouponPercentage: { type: Sequelize.DECIMAL(9, 3), allowNull: true },
      CouponMinimumValue: { type: Sequelize.DECIMAL(9, 3), allowNull: true },
      IsPreferredProviderSubPlan: { type: Sequelize.BOOLEAN, allowNull: true },
      DoPreferredProviderSubPlanSubstitution: {
        type: Sequelize.BOOLEAN,
        allowNull: true,
      },
      IgnoreDrgPrcGrp: { type: Sequelize.BOOLEAN, allowNull: true },
      CentralMaintFieldMask2: { type: Sequelize.INTEGER, allowNull: true },
      PrintCostBreakdownOnReceipt: { type: Sequelize.BOOLEAN, allowNull: true },
      SingleUse: { type: Sequelize.BOOLEAN, allowNull: true },
      GLAccountNumber: { type: Sequelize.STRING(20), allowNull: true },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("kroll_drug_pack_inv_hist", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
      },
      DrgPackID: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "kroll_drug_pack", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      ChangeType: { type: Sequelize.INTEGER, allowNull: false },
      User: { type: Sequelize.STRING(10), allowNull: true },
      TS: { type: Sequelize.DATE, allowNull: false }, // Keep original field if needed
      RxNum: { type: Sequelize.INTEGER, allowNull: true },
      PONum: { type: Sequelize.STRING(30), allowNull: true },
      OldValue: { type: Sequelize.DECIMAL(22, 3), allowNull: true },
      NewValue: { type: Sequelize.DECIMAL(22, 3), allowNull: true },
      Reason: { type: Sequelize.STRING(250), allowNull: true },
      RxWorkflowId: { type: Sequelize.INTEGER, allowNull: true },
      RxWorkflowPackId: { type: Sequelize.INTEGER, allowNull: true },
      VendorId: { type: Sequelize.INTEGER, allowNull: true },
      DeltaAcqCost: { type: Sequelize.DECIMAL(22, 4), allowNull: true },
      StoreId: { type: Sequelize.SMALLINT, allowNull: true },
      CycleCountId: { type: Sequelize.INTEGER, allowNull: true },
      UserId: { type: Sequelize.INTEGER, allowNull: true },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("kroll_patient_plan", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      PatID: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "kroll_patient", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      Sequence: { type: Sequelize.INTEGER, allowNull: false },
      PlanID: {
        type: Sequelize.INTEGER,
        allowNull: true,
        references: { model: "kroll_plan", key: "id" },
        onUpdate: "SET NULL",
        onDelete: "SET NULL",
      },
      SubPlanID: {
        type: Sequelize.INTEGER,
        allowNull: true,
        references: { model: "kroll_plan_sub", key: "id" },
        onUpdate: "SET NULL",
        onDelete: "SET NULL",
      },
      Cardholder: { type: Sequelize.STRING(25), allowNull: true },
      CarrierID: { type: Sequelize.STRING(2), allowNull: true },
      GroupID: { type: Sequelize.STRING(11), allowNull: true },
      ClientID: { type: Sequelize.STRING(30), allowNull: true },
      CPHAPatCode: { type: Sequelize.STRING(3), allowNull: true },
      Expiry: { type: Sequelize.DATE, allowNull: true },
      Rel: { type: Sequelize.STRING(2), allowNull: true },
      DeductType: { type: Sequelize.INTEGER, allowNull: true },
      DeductValue: { type: Sequelize.CHAR(15), allowNull: true }, // CHAR
      Comment: { type: Sequelize.TEXT, allowNull: true },
      LinkID: { type: Sequelize.INTEGER, allowNull: true },
      AlwaysUseInRx: { type: Sequelize.BOOLEAN, allowNull: true },
      InterventionCode: { type: Sequelize.STRING(4), allowNull: true },
      YearlyDeductLimit: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      YearlyDeductAccum: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      YearlyDeductType: { type: Sequelize.INTEGER, allowNull: true },
      YearlyDeductValue: { type: Sequelize.STRING(15), allowNull: true },
      FirstName: { type: Sequelize.STRING(25), allowNull: true },
      InactivatedOn: { type: Sequelize.DATE, allowNull: true },
      Birthday: { type: Sequelize.DATE, allowNull: true },
      PatSex: { type: Sequelize.STRING(1), allowNull: true },
      LastName: { type: Sequelize.STRING(25), allowNull: true },
      Deleted: { type: Sequelize.BOOLEAN, allowNull: true },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("kroll_rx_prescription", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      PatID: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "kroll_patient", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      DrgID: {
        type: Sequelize.INTEGER,
        allowNull: true,
        references: { model: "kroll_drug", key: "id" },
        onUpdate: "SET NULL",
        onDelete: "SET NULL",
      },
      MixID: {
        type: Sequelize.INTEGER,
        allowNull: true,
        references: { model: "kroll_drug_mix", key: "id" },
        onUpdate: "SET NULL",
        onDelete: "SET NULL",
      },
      OrigRxNum: { type: Sequelize.INTEGER, allowNull: false },
      RxNum: { type: Sequelize.INTEGER, allowNull: false, unique: true }, // Add index below
      Init: { type: Sequelize.STRING(6), allowNull: true },
      FillDate: { type: Sequelize.DATE, allowNull: false },
      CancelDate: { type: Sequelize.DATE, allowNull: true },
      FirstFillDate: { type: Sequelize.DATE, allowNull: true },
      LastFillDate: { type: Sequelize.DATE, allowNull: true },
      DispQty: { type: Sequelize.DECIMAL(11, 3), allowNull: false },
      NextFillQty: { type: Sequelize.DECIMAL(11, 3), allowNull: true },
      AuthQty: { type: Sequelize.DECIMAL(11, 3), allowNull: true },
      RemQty: { type: Sequelize.DECIMAL(11, 3), allowNull: true },
      DaysSupply: { type: Sequelize.SMALLINT, allowNull: true },
      Labels: { type: Sequelize.SMALLINT, allowNull: true },
      ProductSelection: { type: Sequelize.INTEGER, allowNull: true },
      OralWritten: { type: Sequelize.CHAR(1), allowNull: true }, // CHAR
      SIG: { type: Sequelize.STRING(2000), allowNull: true },
      SigCRC: { type: Sequelize.INTEGER, allowNull: true },
      DIN: { type: Sequelize.STRING, allowNull: false }, // Assuming non-null from model
      PackSize: { type: Sequelize.DECIMAL(9, 1), allowNull: true },
      AAC: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      Cost: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      Markup: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      Fee: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      MixTime: { type: Sequelize.SMALLINT, allowNull: true },
      MixFee: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      SSCFee: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      PriceDiscount: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      DeductDiscount: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      ManualPrice: { type: Sequelize.BOOLEAN, allowNull: false },
      TrialRx: { type: Sequelize.BOOLEAN, allowNull: true },
      PartialFill: { type: Sequelize.BOOLEAN, allowNull: true },
      DrugExpiryDate: { type: Sequelize.DATE, allowNull: true },
      StopDate: { type: Sequelize.DATE, allowNull: true },
      RxExpiryDate: { type: Sequelize.DATE, allowNull: true },
      FollowUpDate: { type: Sequelize.DATE, allowNull: true },
      Status: { type: Sequelize.INTEGER, allowNull: true },
      Lot: { type: Sequelize.STRING, allowNull: true },
      DocAddressLoc: { type: Sequelize.STRING, allowNull: true },
      SplitQty: { type: Sequelize.BOOLEAN, allowNull: true },
      SplitEvenly: { type: Sequelize.BOOLEAN, allowNull: true },
      LabelQtySplit: { type: Sequelize.STRING(200), allowNull: true },
      AdjState: { type: Sequelize.INTEGER, allowNull: true },
      Inactive: { type: Sequelize.BOOLEAN, allowNull: true },
      CopiedTo: { type: Sequelize.INTEGER, allowNull: true },
      CopiedFrom: { type: Sequelize.INTEGER, allowNull: true },
      TherapeuticStartDate: { type: Sequelize.DATE, allowNull: true },
      TransferredFromDate: { type: Sequelize.DATE, allowNull: true },
      TransferredToDate: { type: Sequelize.DATE, allowNull: true },
      ScriptImage: { type: Sequelize.TEXT, allowNull: true },
      DiscountCost: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      DiscountFee: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      DiscountMarkup: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      DiscountMixFee: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      DiscountSSCFee: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      UserInit: { type: Sequelize.CHAR(10), allowNull: false }, // CHAR
      UnitDoseStartDate: { type: Sequelize.DATE, allowNull: true },
      WrittenDate: { type: Sequelize.DATE, allowNull: false },
      MinIntervalDays: { type: Sequelize.SMALLINT, allowNull: true },
      BackDatedOn: { type: Sequelize.DATE, allowNull: true },
      PrcStratID: { type: Sequelize.INTEGER, allowNull: true },
      CorporatePriceID: { type: Sequelize.STRING, allowNull: true },
      Charged: { type: Sequelize.BOOLEAN, allowNull: true },
      POSPending: { type: Sequelize.BOOLEAN, allowNull: true },
      NHCycle: { type: Sequelize.INTEGER, allowNull: true },
      NHBatchFill: { type: Sequelize.BOOLEAN, allowNull: true },
      NHUnitDose: { type: Sequelize.BOOLEAN, allowNull: true },
      NHWardStock: { type: Sequelize.BOOLEAN, allowNull: true },
      NHMedType: { type: Sequelize.INTEGER, allowNull: true },
      NHExtraMARSpace: { type: Sequelize.BOOLEAN, allowNull: true },
      NHEODStartDate: { type: Sequelize.DATE, allowNull: true },
      NHLabels: { type: Sequelize.SMALLINT, allowNull: true },
      ScriptImageID: { type: Sequelize.INTEGER, allowNull: true },
      FirstDrugName: { type: Sequelize.SMALLINT, allowNull: true },
      SecondDrugName: { type: Sequelize.SMALLINT, allowNull: true },
      PrintSigSmall: { type: Sequelize.SMALLINT, allowNull: true },
      UnlimitedRefills: { type: Sequelize.BOOLEAN, allowNull: true },
      NHComment: { type: Sequelize.STRING(200), allowNull: true },
      RoboticPending: { type: Sequelize.BOOLEAN, allowNull: true },
      NHDaysInUnitDoseCycle: { type: Sequelize.SMALLINT, allowNull: true },
      NHCardNum: { type: Sequelize.SMALLINT, allowNull: true },
      AutoRefill: { type: Sequelize.SMALLINT, allowNull: true },
      NHSplitQty: { type: Sequelize.BOOLEAN, allowNull: true },
      NHSplitEvenly: { type: Sequelize.BOOLEAN, allowNull: true },
      NHLabelQtySplit: { type: Sequelize.STRING(200), allowNull: true },
      NHBatchUseBatchValues: { type: Sequelize.BOOLEAN, allowNull: true },
      NHBatchDailyDosage: { type: Sequelize.DECIMAL(11, 3), allowNull: true },
      NHBatchRegLabels: { type: Sequelize.SMALLINT, allowNull: true },
      NHBatchNHLabels: { type: Sequelize.SMALLINT, allowNull: true },
      MethadoneIngestDate: { type: Sequelize.DATE, allowNull: true },
      IsHidden: { type: Sequelize.BOOLEAN, allowNull: true },
      POSTrigger: { type: Sequelize.INTEGER, allowNull: true },
      NarcRefNum: { type: Sequelize.STRING, allowNull: true },
      IsMistake: { type: Sequelize.BOOLEAN, allowNull: true },
      OrderReceived: { type: Sequelize.BOOLEAN, allowNull: true },
      StoreID: { type: Sequelize.SMALLINT, allowNull: true },
      NHID: { type: Sequelize.INTEGER, allowNull: true },
      NHWardID: { type: Sequelize.INTEGER, allowNull: true },
      RxChangedOn: { type: Sequelize.DATE, allowNull: true },
      DrgPackTierId: { type: Sequelize.INTEGER, allowNull: true },
      WorkOrderId: { type: Sequelize.INTEGER, allowNull: true },
      ForceReportable: { type: Sequelize.BOOLEAN, allowNull: true },
      CeRxRxId: { type: Sequelize.STRING, allowNull: true },
      CeRxDispenseId: { type: Sequelize.STRING, allowNull: true },
      UnitDosePrcStratId: { type: Sequelize.INTEGER, allowNull: true },
      Merged: { type: Sequelize.BOOLEAN, allowNull: true },
      FeeForServiceType: { type: Sequelize.INTEGER, allowNull: true },
      UserField1: { type: Sequelize.STRING, allowNull: true },
      LastRxStatus: { type: Sequelize.SMALLINT, allowNull: true },
      InactivatedOn: { type: Sequelize.DATE, allowNull: true },
      FDBDosageFormCode: { type: Sequelize.STRING, allowNull: true },
      FDBRouteCode: { type: Sequelize.STRING, allowNull: true },
      PickupNotificationRequested: {
        type: Sequelize.SMALLINT,
        allowNull: true,
      },
      NHUnitDoseType: { type: Sequelize.INTEGER, allowNull: true },
      NHUnitDoseFreq: { type: Sequelize.INTEGER, allowNull: true },
      NHUnitDoseAnchorDate: { type: Sequelize.DATE, allowNull: true },
      CeRxOrderType: { type: Sequelize.SMALLINT, allowNull: true },
      CopiedFromReason: { type: Sequelize.SMALLINT, allowNull: true },
      CopiedToReason: { type: Sequelize.SMALLINT, allowNull: true },
      WasUndeliverable: { type: Sequelize.BOOLEAN, allowNull: true },
      CancelRefillType: { type: Sequelize.INTEGER, allowNull: true },
      NHBatchType: { type: Sequelize.INTEGER, allowNull: true },
      LegacyWorkflow: { type: Sequelize.BOOLEAN, allowNull: true },
      CounselingRequired: { type: Sequelize.SMALLINT, allowNull: true },
      CounselingResponse: { type: Sequelize.SMALLINT, allowNull: true },
      IdentificationRequiredOnDelivery: {
        type: Sequelize.SMALLINT,
        allowNull: true,
      },
      ScriptImagePosition: { type: Sequelize.SMALLINT, allowNull: true },
      ScriptImagePage: { type: Sequelize.SMALLINT, allowNull: true },
      ChargeToAR: { type: Sequelize.SMALLINT, allowNull: true },
      RxContextInfo: { type: Sequelize.BLOB, allowNull: true },
      RxContextInfoCompressionType: {
        type: Sequelize.INTEGER,
        allowNull: true,
      },
      OrderCreatedFromNetwork: { type: Sequelize.BOOLEAN, allowNull: true },
      IsPharmacistPrescribe: { type: Sequelize.BOOLEAN, allowNull: true },
      PasstimeCode: { type: Sequelize.STRING, allowNull: true },
      DrugSource: { type: Sequelize.INTEGER, allowNull: true },
      PrescriptiveAuthority: { type: Sequelize.SMALLINT, allowNull: true },
      UserId: { type: Sequelize.INTEGER, allowNull: true },
      UserUserId: { type: Sequelize.INTEGER, allowNull: true },
      CounselingReason: { type: Sequelize.SMALLINT, allowNull: true },
      AdjLogInfo: { type: Sequelize.BLOB, allowNull: true },
      AdjLogInfoCompressionType: { type: Sequelize.INTEGER, allowNull: true },
      FillingAdjComplete: { type: Sequelize.BOOLEAN, allowNull: true },
      BaseCost: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      CouponValue: { type: Sequelize.DECIMAL(9, 2), allowNull: true },
      RxRefillSyncType: { type: Sequelize.INTEGER, allowNull: true },
      ImmunizationId: { type: Sequelize.INTEGER, allowNull: true },
      ImmunizationProductType: { type: Sequelize.INTEGER, allowNull: true },
      DoNotDispenseBeforeDate: { type: Sequelize.DATE, allowNull: true },
      Adapted: { type: Sequelize.INTEGER, allowNull: true },
      MagicNumber: { type: Sequelize.STRING, allowNull: true },
      AdminSites: { type: Sequelize.STRING(200), allowNull: true },
      MaxDoseQty1: { type: Sequelize.DECIMAL(11, 3), allowNull: true },
      MaxDoseQtyUnit1: { type: Sequelize.STRING, allowNull: true },
      MaxDoseRange1: { type: Sequelize.DECIMAL(11, 3), allowNull: true },
      MaxDoseRangeUnit1: { type: Sequelize.STRING, allowNull: true },
      MaxDoseQty2: { type: Sequelize.DECIMAL(11, 3), allowNull: true },
      MaxDoseQtyUnit2: { type: Sequelize.STRING, allowNull: true },
      MaxDoseRange2: { type: Sequelize.DECIMAL(11, 3), allowNull: true },
      MaxDoseRangeUnit2: { type: Sequelize.STRING, allowNull: true },
      ManualStructuredDosing: { type: Sequelize.BOOLEAN, allowNull: true },
      AdditionalStructuredSig: { type: Sequelize.STRING, allowNull: true },
      CarryNumber: { type: Sequelize.INTEGER, allowNull: true },
      PharmacistPrescribeMedReviewRxId: {
        type: Sequelize.INTEGER,
        allowNull: true,
      },
      MaxDispQty: { type: Sequelize.DECIMAL(11, 3), allowNull: true },
      TreatmentType: { type: Sequelize.INTEGER, allowNull: true },
      NoDocERenewal: { type: Sequelize.BOOLEAN, allowNull: true },
      KrollCareRequested: { type: Sequelize.SMALLINT, allowNull: true },
      RefillReminderDate: { type: Sequelize.DATE, allowNull: true },
      LegalAuthorityExpiryDate: { type: Sequelize.DATE, allowNull: true },
      OrigERxOrderId: { type: Sequelize.INTEGER, allowNull: true },
      RefillRemindersAllowed: { type: Sequelize.INTEGER, allowNull: true },
      RenewalReminderDate: { type: Sequelize.DATE, allowNull: true },
      CanDoAutoRefill: { type: Sequelize.BOOLEAN, allowNull: true },
      NHDoNotBatchFillBeforeDate: { type: Sequelize.DATE, allowNull: true },
      ARId: { type: Sequelize.INTEGER, allowNull: true },
      CounselingRejectedReason: { type: Sequelize.INTEGER, allowNull: true },
      CounselingAgentType: { type: Sequelize.INTEGER, allowNull: true },
      CFEligibility: { type: Sequelize.INTEGER, allowNull: true },
      CFRefusalReason: { type: Sequelize.STRING, allowNull: true },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });
    // Add index for the unique RxNum separately
    await queryInterface.addIndex("kroll_rx_prescription", ["RxNum"], {
      name: "uq_kroll_rx_prescription_rxnum",
      unique: true,
    });

    await queryInterface.createTable("invoices", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      PatientId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "kroll_patient", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      RxId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        unique: true,
        references: { model: "kroll_rx_prescription", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      InvoiceDate: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      DueDate: { type: Sequelize.DATE, allowNull: false },
      Description: { type: Sequelize.STRING, allowNull: true },
      Amount: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      AmountPaid: {
        type: Sequelize.DECIMAL(10, 2),
        defaultValue: 0,
        allowNull: false,
      },
      InsuranceCoveredAmount: {
        type: Sequelize.DECIMAL(10, 2),
        defaultValue: 0,
        allowNull: false,
      },
      PatientPortion: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      Status: {
        type: Sequelize.STRING,
        defaultValue: "pending",
        allowNull: false,
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("kroll_rx_prescription_plan", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      Seq: { type: Sequelize.INTEGER, allowNull: true },
      RxNum: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "kroll_rx_prescription", key: "RxNum" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      PatPlnID: {
        type: Sequelize.INTEGER,
        allowNull: true,
        references: { model: "kroll_patient_plan", key: "id" },
        onUpdate: "SET NULL",
        onDelete: "SET NULL",
      },
      Pays: { type: Sequelize.DECIMAL(10, 2), allowNull: true },
      TranType: { type: Sequelize.INTEGER, allowNull: true },
      AdjState: { type: Sequelize.INTEGER, allowNull: true },
      SubPlanCode: { type: Sequelize.STRING(10), allowNull: true },
      IsRT: { type: Sequelize.BOOLEAN, allowNull: true },
      AdjDate: { type: Sequelize.DATE, allowNull: true },
      SSC: { type: Sequelize.STRING(5), allowNull: true },
      SSCFee: { type: Sequelize.DECIMAL(10, 2), allowNull: true },
      SANum: { type: Sequelize.STRING, allowNull: true },
      Interventions: { type: Sequelize.STRING, allowNull: true },
      ReasonCodeRef: { type: Sequelize.STRING, allowNull: true },
      ReasonCode: { type: Sequelize.STRING, allowNull: true },
      StreamData: { type: Sequelize.BLOB, allowNull: true },
      ClaimType: { type: Sequelize.INTEGER, allowNull: true },
      AdjSendDate: { type: Sequelize.DATE, allowNull: true },
      AdjustmentStatus: { type: Sequelize.INTEGER, allowNull: true },
      PseudoDIN: { type: Sequelize.STRING, allowNull: true },
      AdjudicationLevel: { type: Sequelize.INTEGER, allowNull: true },
      PaymentSeq: { type: Sequelize.INTEGER, allowNull: true },
      NonDUESeq: { type: Sequelize.INTEGER, allowNull: true },
      DiscountSSCFee: { type: Sequelize.DECIMAL(10, 2), allowNull: true },
      PseudoDinType: { type: Sequelize.INTEGER, allowNull: true },
      ClaimTypeOverride: { type: Sequelize.BOOLEAN, allowNull: true },
      DrgMixFeeMastId: { type: Sequelize.INTEGER, allowNull: true },
      IsClinicalPlan: { type: Sequelize.BOOLEAN, allowNull: true },
      CancelsRxPlnId: { type: Sequelize.INTEGER, allowNull: true },
      ModifyInProgress: { type: Sequelize.BOOLEAN, allowNull: true },
      CopayStratMastId: { type: Sequelize.INTEGER, allowNull: true },
      CutbackDiscountCost: { type: Sequelize.DECIMAL(10, 2), allowNull: true },
      CutbackDiscountMarkup: {
        type: Sequelize.DECIMAL(10, 2),
        allowNull: true,
      },
      CutbackDiscountFee: { type: Sequelize.DECIMAL(10, 2), allowNull: true },
      CutbackDiscountMixFee: {
        type: Sequelize.DECIMAL(10, 2),
        allowNull: true,
      },
      CutbackDiscountSSCFee: {
        type: Sequelize.DECIMAL(10, 2),
        allowNull: true,
      },
      CopayDiscountCost: { type: Sequelize.DECIMAL(10, 2), allowNull: true },
      CopayDiscountMarkup: { type: Sequelize.DECIMAL(10, 2), allowNull: true },
      CopayDiscountFee: { type: Sequelize.DECIMAL(10, 2), allowNull: true },
      CopayDiscountMixFee: { type: Sequelize.DECIMAL(10, 2), allowNull: true },
      CopayDiscountSSCFee: { type: Sequelize.DECIMAL(10, 2), allowNull: true },
      AdjudicationAdjustedBits: { type: Sequelize.INTEGER, allowNull: true },
      SSCOverride: { type: Sequelize.BOOLEAN, allowNull: true },
      InterventionsOverride: { type: Sequelize.BOOLEAN, allowNull: true },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("payments", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      PatientId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "kroll_patient", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      InvoiceId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "invoices", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      Amount: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      PaymentDate: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      PaymentMethod: { type: Sequelize.STRING, allowNull: false },
      ReferenceNumber: { type: Sequelize.STRING, allowNull: true },
      Notes: { type: Sequelize.TEXT, allowNull: true },
      TransactionStatus: {
        type: Sequelize.STRING,
        defaultValue: "completed",
        allowNull: false,
      },
      ExternalTransactionId: { type: Sequelize.STRING, allowNull: true },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });

    await queryInterface.createTable("kroll_rx_prescription_plan_adj", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false,
        unique: true,
      },
      TS: { type: Sequelize.DATE, allowNull: false }, // Keep original field if needed
      RxPlnID: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: { model: "kroll_rx_prescription_plan", key: "id" },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      ResultCode: { type: Sequelize.STRING, allowNull: false },
      AdjDate: { type: Sequelize.DATE, allowNull: true },
      InterventionCodes: { type: Sequelize.STRING, allowNull: true },
      TraceNum: { type: Sequelize.STRING, allowNull: true },
      RefNum: { type: Sequelize.STRING, allowNull: true },
      ErrorCodes: { type: Sequelize.STRING, allowNull: true },
      Messages: { type: Sequelize.TEXT, allowNull: true },
      Cost: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      Markup: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      Fee: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      MixFee: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      SSCFee: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      PlanPays: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      Request: { type: Sequelize.TEXT, allowNull: true },
      Response: { type: Sequelize.TEXT, allowNull: true },
      SubCost: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      SubMarkup: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      SubFee: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      SubMixFee: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      SubSSCFee: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      PrevPaid: { type: Sequelize.DECIMAL(10, 2), allowNull: false },
      SSC: { type: Sequelize.STRING, allowNull: true },
      SANum: { type: Sequelize.STRING, allowNull: true },
      AdjudicationLevel: { type: Sequelize.INTEGER, allowNull: false },
      DIN: { type: Sequelize.STRING, allowNull: true },
      ParserType: { type: Sequelize.INTEGER, allowNull: true },
      RequestCompressionType: { type: Sequelize.INTEGER, allowNull: true },
      ResponseCompressionType: { type: Sequelize.INTEGER, allowNull: true },
      RequestData: { type: Sequelize.BLOB, allowNull: true },
      ResponseData: { type: Sequelize.BLOB, allowNull: true },
      TransmissionStatus: { type: Sequelize.INTEGER, allowNull: true },
      RxNum: { type: Sequelize.INTEGER, allowNull: false }, // Kept for fidelity, linked via RxPlnID
      AdjResponseDate: { type: Sequelize.DATE, allowNull: true },
      RequestEncoding: { type: Sequelize.STRING, allowNull: true },
      ResponseEncoding: { type: Sequelize.STRING, allowNull: true },
      ClaimType: { type: Sequelize.INTEGER, allowNull: true },
      ClaimResult: { type: Sequelize.INTEGER, allowNull: true },
      AdjRouteId: { type: Sequelize.INTEGER, allowNull: true },
      Copay: { type: Sequelize.DECIMAL, allowNull: false },
      Deductible: { type: Sequelize.DECIMAL, allowNull: false },
      CoInsurance: { type: Sequelize.DECIMAL, allowNull: false },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      },
    });
  },

  async down(queryInterface, Sequelize) {
    // Drop tables in reverse order of creation to respect FK constraints
    await queryInterface.dropTable("kroll_rx_prescription_plan_adj");
    await queryInterface.dropTable("payments");
    await queryInterface.dropTable("kroll_rx_prescription_plan");
    await queryInterface.dropTable("invoices");
    // Drop index before table if it exists
    try {
      await queryInterface.removeIndex(
        "kroll_rx_prescription",
        "uq_kroll_rx_prescription_rxnum"
      );
    } catch (error) {
      console.warn(
        "Could not drop index uq_kroll_rx_prescription_rxnum (may not exist):",
        error.message
      );
    }
    await queryInterface.dropTable("kroll_rx_prescription");
    await queryInterface.dropTable("kroll_patient_plan");
    await queryInterface.dropTable("kroll_drug_pack_inv_hist");
    await queryInterface.dropTable("kroll_plan_sub");
    await queryInterface.dropTable("kroll_drug_pack");
    await queryInterface.dropTable("kroll_patient_com");
    await queryInterface.dropTable("kroll_patient_cnd");
    await queryInterface.dropTable("kroll_patient_alg");
    await queryInterface.dropTable("kroll_patient_phone");
    await queryInterface.dropTable("kroll_plan");
    await queryInterface.dropTable("kroll_drug_mix");
    await queryInterface.dropTable("kroll_drug");
    await queryInterface.dropTable("kroll_patient");
  },
};
